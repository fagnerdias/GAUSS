Nonterminals useless in grammar

   type
   function_def
   procedimento_def
   params
   declaracao
   ids
   return_type


Terminals unused in grammar

   CHAVE_ESQUERDA
   CHAVE_DIREITA
   COLCHETE_ESQUERDA
   COLCHETE_DIREITA
   PONTO
   E_LOGICO_CURTO_CIRCUITO
   OU_LOGICO_CURTO_CIRCUITO
   EXCLAMACAO
   PRINT_INT
   PRINT_FLOAT
   PRINT_CHAR
   PRINT_STRING
   ATRIBUICAO
   MENOR_QUE
   MAIOR_QUE
   MENOR_OU_IGUAL_A
   MAIOR_OU_IGUAL_A
   DIFERENTE_DE
   DO
   END_CASE
   STRUCT
   IS
   END
   FUNCAO
   PROC
   RETURN
   BEGIN
   CONSTANTE
   PRINTF
   SCANF
   CARACTERE
   STRING
   INTEIRO
   FLOAT
   DOUBLE
   VOID
   BOOLEANO
   TRUE
   FALSE
   DIGITO


Rules useless in grammar

   74 stmt: declaracao

   75 type: ID

   76 function_def: FUNCAO ID PARENTESE_DIREITA params PARENTESE_ESQUERDA RETURN return_type IS BEGIN stmts END

   77 procedimento_def: PROC ID PARENTESE_DIREITA params PARENTESE_ESQUERDA IS BEGIN stmts END

   78 params: declaracao
   79       | declaracao VIRGULA params

   80 declaracao: type ids
   81           | function_def
   82           | procedimento_def

   83 ids: ID VIRGULA ids

   84 return_type: VOID
   85            | type


Rules useless in parser due to conflicts

   13 expressao: expressao operador expressao

   46 assign_simples: valor IGUAL_A expressao

   69 for_cond: PONTO_E_VIRGULA PONTO_E_VIRGULA expressao

   72 args: expressao
   73     | expressao VIRGULA expressao


State 10 conflicts: 12 reduce/reduce
State 14 conflicts: 1 shift/reduce
State 15 conflicts: 9 shift/reduce
State 19 conflicts: 1 reduce/reduce
State 49 conflicts: 13 reduce/reduce
State 63 conflicts: 1 shift/reduce, 26 reduce/reduce
State 66 conflicts: 9 shift/reduce
State 68 conflicts: 9 shift/reduce
State 69 conflicts: 9 shift/reduce
State 70 conflicts: 9 shift/reduce, 1 reduce/reduce
State 74 conflicts: 8 shift/reduce, 23 reduce/reduce
State 77 conflicts: 8 shift/reduce, 12 reduce/reduce
State 83 conflicts: 9 shift/reduce
State 94 conflicts: 8 shift/reduce, 1 reduce/reduce
State 97 conflicts: 9 shift/reduce
State 104 conflicts: 8 shift/reduce, 1 reduce/reduce
State 133 conflicts: 9 shift/reduce


Grammar

    0 $accept: prog $end

    1 prog: stmts

    2 stmts: stmt
    3      | stmt PONTO_E_VIRGULA stmts

    4 stmt: if_stmt
    5     | while_stmt
    6     | switch_stmt
    7     | assign
    8     | for_stmt
    9     | JUMP
   10     | BREAK
   11     | procedimento_call

   12 expressao: expressao
   13          | expressao operador expressao
   14          | valor
   15          | LITERAL_QUALQUER
   16          | function_call

   17 operador: MAIS
   18         | MENOS_UNARIO
   19         | ASTERISCO
   20         | BARRA
   21         | MODULO
   22         | EXPONENCIACAO
   23         | E_LOGICO
   24         | OU_LOGICO

   25 operador_unario: INCREMENTO
   26                | DECREMENTO

   27 operador_composto: MAIS_IGUAL
   28                  | MENOS_IGUAL
   29                  | VEZES_IGUAL
   30                  | DIV_IGUAL
   31                  | EXPONENCIACAO_IGUAL

   32 vars: var
   33     | var VIRGULA vars

   34 valores: valor
   35        | valor VIRGULA valores

   36 valor: var
   37      | NULL
   38      | ID

   39 expressao_constante: var

   40 var: ID

   41 assign: assign_simples
   42       | assign_unaria
   43       | assign_composta
   44       | assign_paralela
   45       | assign_ternaria

   46 assign_simples: valor IGUAL_A expressao

   47 assign_unaria: valor operador_unario
   48              | operador_unario valor

   49 assign_composta: var operador_composto valor

   50 assign_paralela: vars IGUAL_A valores

   51 assign_ternaria: expressao OPERADOR_TERNARIO stmts DOIS_PONTOS stmts

   52 if_stmt: IF PARENTESE_DIREITA expressao PARENTESE_ESQUERDA THEN stmts else_if_list else END_IF

   53 else_if_list: else_if
   54             | else_if else_if_list

   55 else_if: ELSEIF PARENTESE_DIREITA expressao PARENTESE_ESQUERDA THEN stmts

   56 else: /* empty */
   57     | ELSE stmts

   58 switch_stmt: SWITCH PARENTESE_DIREITA expressao PARENTESE_ESQUERDA case_stmt default END_SWITCH

   59 default: /* empty */
   60        | DEFAULT stmts

   61 case_stmt: case
   62          | case case_stmt

   63 case: CASE PARENTESE_DIREITA expressao_constante PARENTESE_ESQUERDA DOIS_PONTOS stmts

   64 while_stmt: WHILE PARENTESE_DIREITA expressao PARENTESE_ESQUERDA THEN stmts END_WHILE

   65 for_stmt: FOR PARENTESE_DIREITA for_cond PARENTESE_ESQUERDA THEN stmts END_FOR

   66 for_cond: assign PONTO_E_VIRGULA expressao PONTO_E_VIRGULA assign
   67         | PONTO_E_VIRGULA expressao PONTO_E_VIRGULA assign
   68         | assign PONTO_E_VIRGULA expressao PONTO_E_VIRGULA
   69         | PONTO_E_VIRGULA PONTO_E_VIRGULA expressao

   70 function_call: ID PARENTESE_ESQUERDA args PARENTESE_DIREITA

   71 procedimento_call: ID PARENTESE_ESQUERDA args PARENTESE_DIREITA

   72 args: expressao
   73     | expressao VIRGULA expressao


Terminals, with rules where they appear

$end (0) 0
error (256)
CHAVE_ESQUERDA (258)
CHAVE_DIREITA (259)
PARENTESE_ESQUERDA (260) 52 55 58 63 64 65 70 71
PARENTESE_DIREITA (261) 52 55 58 63 64 65 70 71
COLCHETE_ESQUERDA (262)
COLCHETE_DIREITA (263)
PONTO_E_VIRGULA (264) 3 66 67 68 69
VIRGULA (265) 33 35 73
PONTO (266)
DOIS_PONTOS (267) 51 63
E_LOGICO (268) 23
E_LOGICO_CURTO_CIRCUITO (269)
OU_LOGICO (270) 24
OU_LOGICO_CURTO_CIRCUITO (271)
EXCLAMACAO (272)
ASTERISCO (273) 19
PRINT_INT (274)
PRINT_FLOAT (275)
PRINT_CHAR (276)
PRINT_STRING (277)
MODULO (278) 21
BARRA (279) 20
INCREMENTO (280) 25
DECREMENTO (281) 26
MAIS (282) 17
MENOS_UNARIO (283) 18
EXPONENCIACAO (284) 22
ATRIBUICAO (285)
OPERADOR_TERNARIO (286) 51
MENOR_QUE (287)
MAIOR_QUE (288)
MENOR_OU_IGUAL_A (289)
MAIOR_OU_IGUAL_A (290)
IGUAL_A (291) 46 50
DIFERENTE_DE (292)
MAIS_IGUAL (293) 27
MENOS_IGUAL (294) 28
VEZES_IGUAL (295) 29
DIV_IGUAL (296) 30
EXPONENCIACAO_IGUAL (297) 31
FOR (298) 65
END_FOR (299) 65
DO (300)
WHILE (301) 64
END_WHILE (302) 64
SWITCH (303) 58
END_SWITCH (304) 58
CASE (305) 63
END_CASE (306)
DEFAULT (307) 60
IF (308) 52
END_IF (309) 52
ELSE (310) 57
ELSEIF (311) 55
THEN (312) 52 55 64 65
STRUCT (313)
IS (314)
END (315)
FUNCAO (316)
PROC (317)
RETURN (318)
BEGIN (319)
CONSTANTE (320)
PRINTF (321)
SCANF (322)
CARACTERE (323)
STRING (324)
INTEIRO (325)
FLOAT (326)
DOUBLE (327)
VOID (328)
BOOLEANO (329)
TRUE (330)
FALSE (331)
JUMP (332) 9
BREAK (333) 10
NULL (334) 37
DIGITO (335)
ID (336) 38 40 70 71
LITERAL_QUALQUER (337) 15


Nonterminals, with rules where they appear

$accept (83)
    on left: 0
prog (84)
    on left: 1, on right: 0
stmts (85)
    on left: 2 3, on right: 1 3 51 52 55 57 60 63 64 65
stmt (86)
    on left: 4 5 6 7 8 9 10 11, on right: 2 3
expressao (87)
    on left: 12 13 14 15 16, on right: 12 13 46 51 52 55 58 64 66 67
    68 69 72 73
operador (88)
    on left: 17 18 19 20 21 22 23 24, on right: 13
operador_unario (89)
    on left: 25 26, on right: 47 48
operador_composto (90)
    on left: 27 28 29 30 31, on right: 49
vars (91)
    on left: 32 33, on right: 33 50
valores (92)
    on left: 34 35, on right: 35 50
valor (93)
    on left: 36 37 38, on right: 14 34 35 46 47 48 49
expressao_constante (94)
    on left: 39, on right: 63
var (95)
    on left: 40, on right: 32 33 36 39 49
assign (96)
    on left: 41 42 43 44 45, on right: 7 66 67 68
assign_simples (97)
    on left: 46, on right: 41
assign_unaria (98)
    on left: 47 48, on right: 42
assign_composta (99)
    on left: 49, on right: 43
assign_paralela (100)
    on left: 50, on right: 44
assign_ternaria (101)
    on left: 51, on right: 45
if_stmt (102)
    on left: 52, on right: 4
else_if_list (103)
    on left: 53 54, on right: 52 54
else_if (104)
    on left: 55, on right: 53 54
else (105)
    on left: 56 57, on right: 52
switch_stmt (106)
    on left: 58, on right: 6
default (107)
    on left: 59 60, on right: 58
case_stmt (108)
    on left: 61 62, on right: 58 62
case (109)
    on left: 63, on right: 61 62
while_stmt (110)
    on left: 64, on right: 5
for_stmt (111)
    on left: 65, on right: 8
for_cond (112)
    on left: 66 67 68 69, on right: 65
function_call (113)
    on left: 70, on right: 16
procedimento_call (114)
    on left: 71, on right: 11
args (115)
    on left: 72 73, on right: 70 71


state 0

    0 $accept: . prog $end

    INCREMENTO        shift, and go to state 1
    DECREMENTO        shift, and go to state 2
    FOR               shift, and go to state 3
    WHILE             shift, and go to state 4
    SWITCH            shift, and go to state 5
    IF                shift, and go to state 6
    JUMP              shift, and go to state 7
    BREAK             shift, and go to state 8
    NULL              shift, and go to state 9
    ID                shift, and go to state 10
    LITERAL_QUALQUER  shift, and go to state 11

    prog               go to state 12
    stmts              go to state 13
    stmt               go to state 14
    expressao          go to state 15
    operador_unario    go to state 16
    vars               go to state 17
    valor              go to state 18
    var                go to state 19
    assign             go to state 20
    assign_simples     go to state 21
    assign_unaria      go to state 22
    assign_composta    go to state 23
    assign_paralela    go to state 24
    assign_ternaria    go to state 25
    if_stmt            go to state 26
    switch_stmt        go to state 27
    while_stmt         go to state 28
    for_stmt           go to state 29
    function_call      go to state 30
    procedimento_call  go to state 31


state 1

   25 operador_unario: INCREMENTO .

    $default  reduce using rule 25 (operador_unario)


state 2

   26 operador_unario: DECREMENTO .

    $default  reduce using rule 26 (operador_unario)


state 3

   65 for_stmt: FOR . PARENTESE_DIREITA for_cond PARENTESE_ESQUERDA THEN stmts END_FOR

    PARENTESE_DIREITA  shift, and go to state 32


state 4

   64 while_stmt: WHILE . PARENTESE_DIREITA expressao PARENTESE_ESQUERDA THEN stmts END_WHILE

    PARENTESE_DIREITA  shift, and go to state 33


state 5

   58 switch_stmt: SWITCH . PARENTESE_DIREITA expressao PARENTESE_ESQUERDA case_stmt default END_SWITCH

    PARENTESE_DIREITA  shift, and go to state 34


state 6

   52 if_stmt: IF . PARENTESE_DIREITA expressao PARENTESE_ESQUERDA THEN stmts else_if_list else END_IF

    PARENTESE_DIREITA  shift, and go to state 35


state 7

    9 stmt: JUMP .

    $default  reduce using rule 9 (stmt)


state 8

   10 stmt: BREAK .

    $default  reduce using rule 10 (stmt)


state 9

   37 valor: NULL .

    $default  reduce using rule 37 (valor)


state 10

   38 valor: ID .
   40 var: ID .
   70 function_call: ID . PARENTESE_ESQUERDA args PARENTESE_DIREITA
   71 procedimento_call: ID . PARENTESE_ESQUERDA args PARENTESE_DIREITA

    PARENTESE_ESQUERDA  shift, and go to state 36

    VIRGULA              reduce using rule 40 (var)
    E_LOGICO             reduce using rule 38 (valor)
    E_LOGICO             [reduce using rule 40 (var)]
    OU_LOGICO            reduce using rule 38 (valor)
    OU_LOGICO            [reduce using rule 40 (var)]
    ASTERISCO            reduce using rule 38 (valor)
    ASTERISCO            [reduce using rule 40 (var)]
    MODULO               reduce using rule 38 (valor)
    MODULO               [reduce using rule 40 (var)]
    BARRA                reduce using rule 38 (valor)
    BARRA                [reduce using rule 40 (var)]
    INCREMENTO           reduce using rule 38 (valor)
    INCREMENTO           [reduce using rule 40 (var)]
    DECREMENTO           reduce using rule 38 (valor)
    DECREMENTO           [reduce using rule 40 (var)]
    MAIS                 reduce using rule 38 (valor)
    MAIS                 [reduce using rule 40 (var)]
    MENOS_UNARIO         reduce using rule 38 (valor)
    MENOS_UNARIO         [reduce using rule 40 (var)]
    EXPONENCIACAO        reduce using rule 38 (valor)
    EXPONENCIACAO        [reduce using rule 40 (var)]
    OPERADOR_TERNARIO    reduce using rule 38 (valor)
    OPERADOR_TERNARIO    [reduce using rule 40 (var)]
    IGUAL_A              reduce using rule 38 (valor)
    IGUAL_A              [reduce using rule 40 (var)]
    MAIS_IGUAL           reduce using rule 40 (var)
    MENOS_IGUAL          reduce using rule 40 (var)
    VEZES_IGUAL          reduce using rule 40 (var)
    DIV_IGUAL            reduce using rule 40 (var)
    EXPONENCIACAO_IGUAL  reduce using rule 40 (var)
    $default             reduce using rule 38 (valor)


state 11

   15 expressao: LITERAL_QUALQUER .

    $default  reduce using rule 15 (expressao)


state 12

    0 $accept: prog . $end

    $end  shift, and go to state 37


state 13

    1 prog: stmts .

    $default  reduce using rule 1 (prog)


state 14

    2 stmts: stmt .
    3      | stmt . PONTO_E_VIRGULA stmts

    PONTO_E_VIRGULA  shift, and go to state 38

    PONTO_E_VIRGULA  [reduce using rule 2 (stmts)]
    $default         reduce using rule 2 (stmts)


state 15

   12 expressao: expressao .
   13          | expressao . operador expressao
   51 assign_ternaria: expressao . OPERADOR_TERNARIO stmts DOIS_PONTOS stmts

    E_LOGICO           shift, and go to state 39
    OU_LOGICO          shift, and go to state 40
    ASTERISCO          shift, and go to state 41
    MODULO             shift, and go to state 42
    BARRA              shift, and go to state 43
    MAIS               shift, and go to state 44
    MENOS_UNARIO       shift, and go to state 45
    EXPONENCIACAO      shift, and go to state 46
    OPERADOR_TERNARIO  shift, and go to state 47

    E_LOGICO           [reduce using rule 12 (expressao)]
    OU_LOGICO          [reduce using rule 12 (expressao)]
    ASTERISCO          [reduce using rule 12 (expressao)]
    MODULO             [reduce using rule 12 (expressao)]
    BARRA              [reduce using rule 12 (expressao)]
    MAIS               [reduce using rule 12 (expressao)]
    MENOS_UNARIO       [reduce using rule 12 (expressao)]
    EXPONENCIACAO      [reduce using rule 12 (expressao)]
    OPERADOR_TERNARIO  [reduce using rule 12 (expressao)]

    operador  go to state 48


state 16

   48 assign_unaria: operador_unario . valor

    NULL  shift, and go to state 9
    ID    shift, and go to state 49

    valor  go to state 50
    var    go to state 51


state 17

   50 assign_paralela: vars . IGUAL_A valores

    IGUAL_A  shift, and go to state 52


state 18

   14 expressao: valor .
   46 assign_simples: valor . IGUAL_A expressao
   47 assign_unaria: valor . operador_unario

    INCREMENTO  shift, and go to state 1
    DECREMENTO  shift, and go to state 2
    IGUAL_A     shift, and go to state 53

    $default  reduce using rule 14 (expressao)

    operador_unario  go to state 54


state 19

   32 vars: var .
   33     | var . VIRGULA vars
   36 valor: var .
   49 assign_composta: var . operador_composto valor

    VIRGULA              shift, and go to state 55
    MAIS_IGUAL           shift, and go to state 56
    MENOS_IGUAL          shift, and go to state 57
    VEZES_IGUAL          shift, and go to state 58
    DIV_IGUAL            shift, and go to state 59
    EXPONENCIACAO_IGUAL  shift, and go to state 60

    IGUAL_A   reduce using rule 32 (vars)
    IGUAL_A   [reduce using rule 36 (valor)]
    $default  reduce using rule 36 (valor)

    operador_composto  go to state 61


state 20

    7 stmt: assign .

    $default  reduce using rule 7 (stmt)


state 21

   41 assign: assign_simples .

    $default  reduce using rule 41 (assign)


state 22

   42 assign: assign_unaria .

    $default  reduce using rule 42 (assign)


state 23

   43 assign: assign_composta .

    $default  reduce using rule 43 (assign)


state 24

   44 assign: assign_paralela .

    $default  reduce using rule 44 (assign)


state 25

   45 assign: assign_ternaria .

    $default  reduce using rule 45 (assign)


state 26

    4 stmt: if_stmt .

    $default  reduce using rule 4 (stmt)


state 27

    6 stmt: switch_stmt .

    $default  reduce using rule 6 (stmt)


state 28

    5 stmt: while_stmt .

    $default  reduce using rule 5 (stmt)


state 29

    8 stmt: for_stmt .

    $default  reduce using rule 8 (stmt)


state 30

   16 expressao: function_call .

    $default  reduce using rule 16 (expressao)


state 31

   11 stmt: procedimento_call .

    $default  reduce using rule 11 (stmt)


state 32

   65 for_stmt: FOR PARENTESE_DIREITA . for_cond PARENTESE_ESQUERDA THEN stmts END_FOR

    PONTO_E_VIRGULA   shift, and go to state 62
    INCREMENTO        shift, and go to state 1
    DECREMENTO        shift, and go to state 2
    NULL              shift, and go to state 9
    ID                shift, and go to state 63
    LITERAL_QUALQUER  shift, and go to state 11

    expressao        go to state 15
    operador_unario  go to state 16
    vars             go to state 17
    valor            go to state 18
    var              go to state 19
    assign           go to state 64
    assign_simples   go to state 21
    assign_unaria    go to state 22
    assign_composta  go to state 23
    assign_paralela  go to state 24
    assign_ternaria  go to state 25
    for_cond         go to state 65
    function_call    go to state 30


state 33

   64 while_stmt: WHILE PARENTESE_DIREITA . expressao PARENTESE_ESQUERDA THEN stmts END_WHILE

    NULL              shift, and go to state 9
    ID                shift, and go to state 63
    LITERAL_QUALQUER  shift, and go to state 11

    expressao      go to state 66
    valor          go to state 67
    var            go to state 51
    function_call  go to state 30


state 34

   58 switch_stmt: SWITCH PARENTESE_DIREITA . expressao PARENTESE_ESQUERDA case_stmt default END_SWITCH

    NULL              shift, and go to state 9
    ID                shift, and go to state 63
    LITERAL_QUALQUER  shift, and go to state 11

    expressao      go to state 68
    valor          go to state 67
    var            go to state 51
    function_call  go to state 30


state 35

   52 if_stmt: IF PARENTESE_DIREITA . expressao PARENTESE_ESQUERDA THEN stmts else_if_list else END_IF

    NULL              shift, and go to state 9
    ID                shift, and go to state 63
    LITERAL_QUALQUER  shift, and go to state 11

    expressao      go to state 69
    valor          go to state 67
    var            go to state 51
    function_call  go to state 30


state 36

   70 function_call: ID PARENTESE_ESQUERDA . args PARENTESE_DIREITA
   71 procedimento_call: ID PARENTESE_ESQUERDA . args PARENTESE_DIREITA

    NULL              shift, and go to state 9
    ID                shift, and go to state 63
    LITERAL_QUALQUER  shift, and go to state 11

    expressao      go to state 70
    valor          go to state 67
    var            go to state 51
    function_call  go to state 30
    args           go to state 71


state 37

    0 $accept: prog $end .

    $default  accept


state 38

    3 stmts: stmt PONTO_E_VIRGULA . stmts

    INCREMENTO        shift, and go to state 1
    DECREMENTO        shift, and go to state 2
    FOR               shift, and go to state 3
    WHILE             shift, and go to state 4
    SWITCH            shift, and go to state 5
    IF                shift, and go to state 6
    JUMP              shift, and go to state 7
    BREAK             shift, and go to state 8
    NULL              shift, and go to state 9
    ID                shift, and go to state 10
    LITERAL_QUALQUER  shift, and go to state 11

    stmts              go to state 72
    stmt               go to state 14
    expressao          go to state 15
    operador_unario    go to state 16
    vars               go to state 17
    valor              go to state 18
    var                go to state 19
    assign             go to state 20
    assign_simples     go to state 21
    assign_unaria      go to state 22
    assign_composta    go to state 23
    assign_paralela    go to state 24
    assign_ternaria    go to state 25
    if_stmt            go to state 26
    switch_stmt        go to state 27
    while_stmt         go to state 28
    for_stmt           go to state 29
    function_call      go to state 30
    procedimento_call  go to state 31


state 39

   23 operador: E_LOGICO .

    $default  reduce using rule 23 (operador)


state 40

   24 operador: OU_LOGICO .

    $default  reduce using rule 24 (operador)


state 41

   19 operador: ASTERISCO .

    $default  reduce using rule 19 (operador)


state 42

   21 operador: MODULO .

    $default  reduce using rule 21 (operador)


state 43

   20 operador: BARRA .

    $default  reduce using rule 20 (operador)


state 44

   17 operador: MAIS .

    $default  reduce using rule 17 (operador)


state 45

   18 operador: MENOS_UNARIO .

    $default  reduce using rule 18 (operador)


state 46

   22 operador: EXPONENCIACAO .

    $default  reduce using rule 22 (operador)


state 47

   51 assign_ternaria: expressao OPERADOR_TERNARIO . stmts DOIS_PONTOS stmts

    INCREMENTO        shift, and go to state 1
    DECREMENTO        shift, and go to state 2
    FOR               shift, and go to state 3
    WHILE             shift, and go to state 4
    SWITCH            shift, and go to state 5
    IF                shift, and go to state 6
    JUMP              shift, and go to state 7
    BREAK             shift, and go to state 8
    NULL              shift, and go to state 9
    ID                shift, and go to state 10
    LITERAL_QUALQUER  shift, and go to state 11

    stmts              go to state 73
    stmt               go to state 14
    expressao          go to state 15
    operador_unario    go to state 16
    vars               go to state 17
    valor              go to state 18
    var                go to state 19
    assign             go to state 20
    assign_simples     go to state 21
    assign_unaria      go to state 22
    assign_composta    go to state 23
    assign_paralela    go to state 24
    assign_ternaria    go to state 25
    if_stmt            go to state 26
    switch_stmt        go to state 27
    while_stmt         go to state 28
    for_stmt           go to state 29
    function_call      go to state 30
    procedimento_call  go to state 31


state 48

   13 expressao: expressao operador . expressao

    NULL              shift, and go to state 9
    ID                shift, and go to state 63
    LITERAL_QUALQUER  shift, and go to state 11

    expressao      go to state 74
    valor          go to state 67
    var            go to state 51
    function_call  go to state 30


state 49

   38 valor: ID .
   40 var: ID .

    $end                reduce using rule 38 (valor)
    $end                [reduce using rule 40 (var)]
    PARENTESE_ESQUERDA  reduce using rule 38 (valor)
    PARENTESE_ESQUERDA  [reduce using rule 40 (var)]
    PONTO_E_VIRGULA     reduce using rule 38 (valor)
    PONTO_E_VIRGULA     [reduce using rule 40 (var)]
    VIRGULA             reduce using rule 38 (valor)
    VIRGULA             [reduce using rule 40 (var)]
    DOIS_PONTOS         reduce using rule 38 (valor)
    DOIS_PONTOS         [reduce using rule 40 (var)]
    END_FOR             reduce using rule 38 (valor)
    END_FOR             [reduce using rule 40 (var)]
    END_WHILE           reduce using rule 38 (valor)
    END_WHILE           [reduce using rule 40 (var)]
    END_SWITCH          reduce using rule 38 (valor)
    END_SWITCH          [reduce using rule 40 (var)]
    CASE                reduce using rule 38 (valor)
    CASE                [reduce using rule 40 (var)]
    DEFAULT             reduce using rule 38 (valor)
    DEFAULT             [reduce using rule 40 (var)]
    END_IF              reduce using rule 38 (valor)
    END_IF              [reduce using rule 40 (var)]
    ELSE                reduce using rule 38 (valor)
    ELSE                [reduce using rule 40 (var)]
    ELSEIF              reduce using rule 38 (valor)
    ELSEIF              [reduce using rule 40 (var)]
    $default            reduce using rule 38 (valor)


state 50

   48 assign_unaria: operador_unario valor .

    $default  reduce using rule 48 (assign_unaria)


state 51

   36 valor: var .

    $default  reduce using rule 36 (valor)


state 52

   50 assign_paralela: vars IGUAL_A . valores

    NULL  shift, and go to state 9
    ID    shift, and go to state 49

    valores  go to state 75
    valor    go to state 76
    var      go to state 51


state 53

   46 assign_simples: valor IGUAL_A . expressao

    NULL              shift, and go to state 9
    ID                shift, and go to state 63
    LITERAL_QUALQUER  shift, and go to state 11

    expressao      go to state 77
    valor          go to state 67
    var            go to state 51
    function_call  go to state 30


state 54

   47 assign_unaria: valor operador_unario .

    $default  reduce using rule 47 (assign_unaria)


state 55

   33 vars: var VIRGULA . vars

    ID  shift, and go to state 78

    vars  go to state 79
    var   go to state 80


state 56

   27 operador_composto: MAIS_IGUAL .

    $default  reduce using rule 27 (operador_composto)


state 57

   28 operador_composto: MENOS_IGUAL .

    $default  reduce using rule 28 (operador_composto)


state 58

   29 operador_composto: VEZES_IGUAL .

    $default  reduce using rule 29 (operador_composto)


state 59

   30 operador_composto: DIV_IGUAL .

    $default  reduce using rule 30 (operador_composto)


state 60

   31 operador_composto: EXPONENCIACAO_IGUAL .

    $default  reduce using rule 31 (operador_composto)


state 61

   49 assign_composta: var operador_composto . valor

    NULL  shift, and go to state 9
    ID    shift, and go to state 49

    valor  go to state 81
    var    go to state 51


state 62

   67 for_cond: PONTO_E_VIRGULA . expressao PONTO_E_VIRGULA assign
   69         | PONTO_E_VIRGULA . PONTO_E_VIRGULA expressao

    PONTO_E_VIRGULA   shift, and go to state 82
    NULL              shift, and go to state 9
    ID                shift, and go to state 63
    LITERAL_QUALQUER  shift, and go to state 11

    expressao      go to state 83
    valor          go to state 67
    var            go to state 51
    function_call  go to state 30


state 63

   38 valor: ID .
   40 var: ID .
   70 function_call: ID . PARENTESE_ESQUERDA args PARENTESE_DIREITA

    PARENTESE_ESQUERDA  shift, and go to state 84

    $end                 reduce using rule 38 (valor)
    $end                 [reduce using rule 40 (var)]
    PARENTESE_ESQUERDA   [reduce using rule 38 (valor)]
    PARENTESE_ESQUERDA   [reduce using rule 40 (var)]
    PARENTESE_DIREITA    reduce using rule 38 (valor)
    PARENTESE_DIREITA    [reduce using rule 40 (var)]
    PONTO_E_VIRGULA      reduce using rule 38 (valor)
    PONTO_E_VIRGULA      [reduce using rule 40 (var)]
    VIRGULA              reduce using rule 38 (valor)
    VIRGULA              [reduce using rule 40 (var)]
    DOIS_PONTOS          reduce using rule 38 (valor)
    DOIS_PONTOS          [reduce using rule 40 (var)]
    E_LOGICO             reduce using rule 38 (valor)
    E_LOGICO             [reduce using rule 40 (var)]
    OU_LOGICO            reduce using rule 38 (valor)
    OU_LOGICO            [reduce using rule 40 (var)]
    ASTERISCO            reduce using rule 38 (valor)
    ASTERISCO            [reduce using rule 40 (var)]
    MODULO               reduce using rule 38 (valor)
    MODULO               [reduce using rule 40 (var)]
    BARRA                reduce using rule 38 (valor)
    BARRA                [reduce using rule 40 (var)]
    INCREMENTO           reduce using rule 38 (valor)
    INCREMENTO           [reduce using rule 40 (var)]
    DECREMENTO           reduce using rule 38 (valor)
    DECREMENTO           [reduce using rule 40 (var)]
    MAIS                 reduce using rule 38 (valor)
    MAIS                 [reduce using rule 40 (var)]
    MENOS_UNARIO         reduce using rule 38 (valor)
    MENOS_UNARIO         [reduce using rule 40 (var)]
    EXPONENCIACAO        reduce using rule 38 (valor)
    EXPONENCIACAO        [reduce using rule 40 (var)]
    OPERADOR_TERNARIO    reduce using rule 38 (valor)
    OPERADOR_TERNARIO    [reduce using rule 40 (var)]
    IGUAL_A              reduce using rule 38 (valor)
    IGUAL_A              [reduce using rule 40 (var)]
    MAIS_IGUAL           reduce using rule 40 (var)
    MENOS_IGUAL          reduce using rule 40 (var)
    VEZES_IGUAL          reduce using rule 40 (var)
    DIV_IGUAL            reduce using rule 40 (var)
    EXPONENCIACAO_IGUAL  reduce using rule 40 (var)
    END_FOR              reduce using rule 38 (valor)
    END_FOR              [reduce using rule 40 (var)]
    END_WHILE            reduce using rule 38 (valor)
    END_WHILE            [reduce using rule 40 (var)]
    END_SWITCH           reduce using rule 38 (valor)
    END_SWITCH           [reduce using rule 40 (var)]
    CASE                 reduce using rule 38 (valor)
    CASE                 [reduce using rule 40 (var)]
    DEFAULT              reduce using rule 38 (valor)
    DEFAULT              [reduce using rule 40 (var)]
    END_IF               reduce using rule 38 (valor)
    END_IF               [reduce using rule 40 (var)]
    ELSE                 reduce using rule 38 (valor)
    ELSE                 [reduce using rule 40 (var)]
    ELSEIF               reduce using rule 38 (valor)
    ELSEIF               [reduce using rule 40 (var)]
    $default             reduce using rule 38 (valor)


state 64

   66 for_cond: assign . PONTO_E_VIRGULA expressao PONTO_E_VIRGULA assign
   68         | assign . PONTO_E_VIRGULA expressao PONTO_E_VIRGULA

    PONTO_E_VIRGULA  shift, and go to state 85


state 65

   65 for_stmt: FOR PARENTESE_DIREITA for_cond . PARENTESE_ESQUERDA THEN stmts END_FOR

    PARENTESE_ESQUERDA  shift, and go to state 86


state 66

   12 expressao: expressao .
   13          | expressao . operador expressao
   64 while_stmt: WHILE PARENTESE_DIREITA expressao . PARENTESE_ESQUERDA THEN stmts END_WHILE

    PARENTESE_ESQUERDA  shift, and go to state 87
    E_LOGICO            shift, and go to state 39
    OU_LOGICO           shift, and go to state 40
    ASTERISCO           shift, and go to state 41
    MODULO              shift, and go to state 42
    BARRA               shift, and go to state 43
    MAIS                shift, and go to state 44
    MENOS_UNARIO        shift, and go to state 45
    EXPONENCIACAO       shift, and go to state 46

    PARENTESE_ESQUERDA  [reduce using rule 12 (expressao)]
    E_LOGICO            [reduce using rule 12 (expressao)]
    OU_LOGICO           [reduce using rule 12 (expressao)]
    ASTERISCO           [reduce using rule 12 (expressao)]
    MODULO              [reduce using rule 12 (expressao)]
    BARRA               [reduce using rule 12 (expressao)]
    MAIS                [reduce using rule 12 (expressao)]
    MENOS_UNARIO        [reduce using rule 12 (expressao)]
    EXPONENCIACAO       [reduce using rule 12 (expressao)]

    operador  go to state 48


state 67

   14 expressao: valor .

    $default  reduce using rule 14 (expressao)


state 68

   12 expressao: expressao .
   13          | expressao . operador expressao
   58 switch_stmt: SWITCH PARENTESE_DIREITA expressao . PARENTESE_ESQUERDA case_stmt default END_SWITCH

    PARENTESE_ESQUERDA  shift, and go to state 88
    E_LOGICO            shift, and go to state 39
    OU_LOGICO           shift, and go to state 40
    ASTERISCO           shift, and go to state 41
    MODULO              shift, and go to state 42
    BARRA               shift, and go to state 43
    MAIS                shift, and go to state 44
    MENOS_UNARIO        shift, and go to state 45
    EXPONENCIACAO       shift, and go to state 46

    PARENTESE_ESQUERDA  [reduce using rule 12 (expressao)]
    E_LOGICO            [reduce using rule 12 (expressao)]
    OU_LOGICO           [reduce using rule 12 (expressao)]
    ASTERISCO           [reduce using rule 12 (expressao)]
    MODULO              [reduce using rule 12 (expressao)]
    BARRA               [reduce using rule 12 (expressao)]
    MAIS                [reduce using rule 12 (expressao)]
    MENOS_UNARIO        [reduce using rule 12 (expressao)]
    EXPONENCIACAO       [reduce using rule 12 (expressao)]

    operador  go to state 48


state 69

   12 expressao: expressao .
   13          | expressao . operador expressao
   52 if_stmt: IF PARENTESE_DIREITA expressao . PARENTESE_ESQUERDA THEN stmts else_if_list else END_IF

    PARENTESE_ESQUERDA  shift, and go to state 89
    E_LOGICO            shift, and go to state 39
    OU_LOGICO           shift, and go to state 40
    ASTERISCO           shift, and go to state 41
    MODULO              shift, and go to state 42
    BARRA               shift, and go to state 43
    MAIS                shift, and go to state 44
    MENOS_UNARIO        shift, and go to state 45
    EXPONENCIACAO       shift, and go to state 46

    PARENTESE_ESQUERDA  [reduce using rule 12 (expressao)]
    E_LOGICO            [reduce using rule 12 (expressao)]
    OU_LOGICO           [reduce using rule 12 (expressao)]
    ASTERISCO           [reduce using rule 12 (expressao)]
    MODULO              [reduce using rule 12 (expressao)]
    BARRA               [reduce using rule 12 (expressao)]
    MAIS                [reduce using rule 12 (expressao)]
    MENOS_UNARIO        [reduce using rule 12 (expressao)]
    EXPONENCIACAO       [reduce using rule 12 (expressao)]

    operador  go to state 48


state 70

   12 expressao: expressao .
   13          | expressao . operador expressao
   72 args: expressao .
   73     | expressao . VIRGULA expressao

    VIRGULA        shift, and go to state 90
    E_LOGICO       shift, and go to state 39
    OU_LOGICO      shift, and go to state 40
    ASTERISCO      shift, and go to state 41
    MODULO         shift, and go to state 42
    BARRA          shift, and go to state 43
    MAIS           shift, and go to state 44
    MENOS_UNARIO   shift, and go to state 45
    EXPONENCIACAO  shift, and go to state 46

    PARENTESE_DIREITA  reduce using rule 12 (expressao)
    PARENTESE_DIREITA  [reduce using rule 72 (args)]
    VIRGULA            [reduce using rule 12 (expressao)]
    E_LOGICO           [reduce using rule 12 (expressao)]
    OU_LOGICO          [reduce using rule 12 (expressao)]
    ASTERISCO          [reduce using rule 12 (expressao)]
    MODULO             [reduce using rule 12 (expressao)]
    BARRA              [reduce using rule 12 (expressao)]
    MAIS               [reduce using rule 12 (expressao)]
    MENOS_UNARIO       [reduce using rule 12 (expressao)]
    EXPONENCIACAO      [reduce using rule 12 (expressao)]
    $default           reduce using rule 12 (expressao)

    operador  go to state 48


state 71

   70 function_call: ID PARENTESE_ESQUERDA args . PARENTESE_DIREITA
   71 procedimento_call: ID PARENTESE_ESQUERDA args . PARENTESE_DIREITA

    PARENTESE_DIREITA  shift, and go to state 91


state 72

    3 stmts: stmt PONTO_E_VIRGULA stmts .

    $default  reduce using rule 3 (stmts)


state 73

   51 assign_ternaria: expressao OPERADOR_TERNARIO stmts . DOIS_PONTOS stmts

    DOIS_PONTOS  shift, and go to state 92


state 74

   12 expressao: expressao .
   13          | expressao . operador expressao
   13          | expressao operador expressao .

    E_LOGICO       shift, and go to state 39
    OU_LOGICO      shift, and go to state 40
    ASTERISCO      shift, and go to state 41
    MODULO         shift, and go to state 42
    BARRA          shift, and go to state 43
    MAIS           shift, and go to state 44
    MENOS_UNARIO   shift, and go to state 45
    EXPONENCIACAO  shift, and go to state 46

    $end                reduce using rule 12 (expressao)
    $end                [reduce using rule 13 (expressao)]
    PARENTESE_ESQUERDA  reduce using rule 12 (expressao)
    PARENTESE_ESQUERDA  [reduce using rule 13 (expressao)]
    PARENTESE_DIREITA   reduce using rule 12 (expressao)
    PARENTESE_DIREITA   [reduce using rule 13 (expressao)]
    PONTO_E_VIRGULA     reduce using rule 12 (expressao)
    PONTO_E_VIRGULA     [reduce using rule 13 (expressao)]
    VIRGULA             reduce using rule 12 (expressao)
    VIRGULA             [reduce using rule 13 (expressao)]
    DOIS_PONTOS         reduce using rule 12 (expressao)
    DOIS_PONTOS         [reduce using rule 13 (expressao)]
    E_LOGICO            [reduce using rule 12 (expressao)]
    E_LOGICO            [reduce using rule 13 (expressao)]
    OU_LOGICO           [reduce using rule 12 (expressao)]
    OU_LOGICO           [reduce using rule 13 (expressao)]
    ASTERISCO           [reduce using rule 12 (expressao)]
    ASTERISCO           [reduce using rule 13 (expressao)]
    MODULO              [reduce using rule 12 (expressao)]
    MODULO              [reduce using rule 13 (expressao)]
    BARRA               [reduce using rule 12 (expressao)]
    BARRA               [reduce using rule 13 (expressao)]
    MAIS                [reduce using rule 12 (expressao)]
    MAIS                [reduce using rule 13 (expressao)]
    MENOS_UNARIO        [reduce using rule 12 (expressao)]
    MENOS_UNARIO        [reduce using rule 13 (expressao)]
    EXPONENCIACAO       [reduce using rule 12 (expressao)]
    EXPONENCIACAO       [reduce using rule 13 (expressao)]
    OPERADOR_TERNARIO   reduce using rule 12 (expressao)
    OPERADOR_TERNARIO   [reduce using rule 13 (expressao)]
    END_FOR             reduce using rule 12 (expressao)
    END_FOR             [reduce using rule 13 (expressao)]
    END_WHILE           reduce using rule 12 (expressao)
    END_WHILE           [reduce using rule 13 (expressao)]
    END_SWITCH          reduce using rule 12 (expressao)
    END_SWITCH          [reduce using rule 13 (expressao)]
    CASE                reduce using rule 12 (expressao)
    CASE                [reduce using rule 13 (expressao)]
    DEFAULT             reduce using rule 12 (expressao)
    DEFAULT             [reduce using rule 13 (expressao)]
    END_IF              reduce using rule 12 (expressao)
    END_IF              [reduce using rule 13 (expressao)]
    ELSE                reduce using rule 12 (expressao)
    ELSE                [reduce using rule 13 (expressao)]
    ELSEIF              reduce using rule 12 (expressao)
    ELSEIF              [reduce using rule 13 (expressao)]
    $default            reduce using rule 12 (expressao)

    operador  go to state 48


state 75

   50 assign_paralela: vars IGUAL_A valores .

    $default  reduce using rule 50 (assign_paralela)


state 76

   34 valores: valor .
   35        | valor . VIRGULA valores

    VIRGULA  shift, and go to state 93

    $default  reduce using rule 34 (valores)


state 77

   12 expressao: expressao .
   13          | expressao . operador expressao
   46 assign_simples: valor IGUAL_A expressao .

    E_LOGICO       shift, and go to state 39
    OU_LOGICO      shift, and go to state 40
    ASTERISCO      shift, and go to state 41
    MODULO         shift, and go to state 42
    BARRA          shift, and go to state 43
    MAIS           shift, and go to state 44
    MENOS_UNARIO   shift, and go to state 45
    EXPONENCIACAO  shift, and go to state 46

    $end                reduce using rule 12 (expressao)
    $end                [reduce using rule 46 (assign_simples)]
    PARENTESE_ESQUERDA  reduce using rule 12 (expressao)
    PARENTESE_ESQUERDA  [reduce using rule 46 (assign_simples)]
    PONTO_E_VIRGULA     reduce using rule 12 (expressao)
    PONTO_E_VIRGULA     [reduce using rule 46 (assign_simples)]
    DOIS_PONTOS         reduce using rule 12 (expressao)
    DOIS_PONTOS         [reduce using rule 46 (assign_simples)]
    E_LOGICO            [reduce using rule 12 (expressao)]
    OU_LOGICO           [reduce using rule 12 (expressao)]
    ASTERISCO           [reduce using rule 12 (expressao)]
    MODULO              [reduce using rule 12 (expressao)]
    BARRA               [reduce using rule 12 (expressao)]
    MAIS                [reduce using rule 12 (expressao)]
    MENOS_UNARIO        [reduce using rule 12 (expressao)]
    EXPONENCIACAO       [reduce using rule 12 (expressao)]
    END_FOR             reduce using rule 12 (expressao)
    END_FOR             [reduce using rule 46 (assign_simples)]
    END_WHILE           reduce using rule 12 (expressao)
    END_WHILE           [reduce using rule 46 (assign_simples)]
    END_SWITCH          reduce using rule 12 (expressao)
    END_SWITCH          [reduce using rule 46 (assign_simples)]
    CASE                reduce using rule 12 (expressao)
    CASE                [reduce using rule 46 (assign_simples)]
    DEFAULT             reduce using rule 12 (expressao)
    DEFAULT             [reduce using rule 46 (assign_simples)]
    END_IF              reduce using rule 12 (expressao)
    END_IF              [reduce using rule 46 (assign_simples)]
    ELSE                reduce using rule 12 (expressao)
    ELSE                [reduce using rule 46 (assign_simples)]
    ELSEIF              reduce using rule 12 (expressao)
    ELSEIF              [reduce using rule 46 (assign_simples)]
    $default            reduce using rule 12 (expressao)

    operador  go to state 48


state 78

   40 var: ID .

    $default  reduce using rule 40 (var)


state 79

   33 vars: var VIRGULA vars .

    $default  reduce using rule 33 (vars)


state 80

   32 vars: var .
   33     | var . VIRGULA vars

    VIRGULA  shift, and go to state 55

    $default  reduce using rule 32 (vars)


state 81

   49 assign_composta: var operador_composto valor .

    $default  reduce using rule 49 (assign_composta)


state 82

   69 for_cond: PONTO_E_VIRGULA PONTO_E_VIRGULA . expressao

    NULL              shift, and go to state 9
    ID                shift, and go to state 63
    LITERAL_QUALQUER  shift, and go to state 11

    expressao      go to state 94
    valor          go to state 67
    var            go to state 51
    function_call  go to state 30


state 83

   12 expressao: expressao .
   13          | expressao . operador expressao
   67 for_cond: PONTO_E_VIRGULA expressao . PONTO_E_VIRGULA assign

    PONTO_E_VIRGULA  shift, and go to state 95
    E_LOGICO         shift, and go to state 39
    OU_LOGICO        shift, and go to state 40
    ASTERISCO        shift, and go to state 41
    MODULO           shift, and go to state 42
    BARRA            shift, and go to state 43
    MAIS             shift, and go to state 44
    MENOS_UNARIO     shift, and go to state 45
    EXPONENCIACAO    shift, and go to state 46

    PONTO_E_VIRGULA  [reduce using rule 12 (expressao)]
    E_LOGICO         [reduce using rule 12 (expressao)]
    OU_LOGICO        [reduce using rule 12 (expressao)]
    ASTERISCO        [reduce using rule 12 (expressao)]
    MODULO           [reduce using rule 12 (expressao)]
    BARRA            [reduce using rule 12 (expressao)]
    MAIS             [reduce using rule 12 (expressao)]
    MENOS_UNARIO     [reduce using rule 12 (expressao)]
    EXPONENCIACAO    [reduce using rule 12 (expressao)]

    operador  go to state 48


state 84

   70 function_call: ID PARENTESE_ESQUERDA . args PARENTESE_DIREITA

    NULL              shift, and go to state 9
    ID                shift, and go to state 63
    LITERAL_QUALQUER  shift, and go to state 11

    expressao      go to state 70
    valor          go to state 67
    var            go to state 51
    function_call  go to state 30
    args           go to state 96


state 85

   66 for_cond: assign PONTO_E_VIRGULA . expressao PONTO_E_VIRGULA assign
   68         | assign PONTO_E_VIRGULA . expressao PONTO_E_VIRGULA

    NULL              shift, and go to state 9
    ID                shift, and go to state 63
    LITERAL_QUALQUER  shift, and go to state 11

    expressao      go to state 97
    valor          go to state 67
    var            go to state 51
    function_call  go to state 30


state 86

   65 for_stmt: FOR PARENTESE_DIREITA for_cond PARENTESE_ESQUERDA . THEN stmts END_FOR

    THEN  shift, and go to state 98


state 87

   64 while_stmt: WHILE PARENTESE_DIREITA expressao PARENTESE_ESQUERDA . THEN stmts END_WHILE

    THEN  shift, and go to state 99


state 88

   58 switch_stmt: SWITCH PARENTESE_DIREITA expressao PARENTESE_ESQUERDA . case_stmt default END_SWITCH

    CASE  shift, and go to state 100

    case_stmt  go to state 101
    case       go to state 102


state 89

   52 if_stmt: IF PARENTESE_DIREITA expressao PARENTESE_ESQUERDA . THEN stmts else_if_list else END_IF

    THEN  shift, and go to state 103


state 90

   73 args: expressao VIRGULA . expressao

    NULL              shift, and go to state 9
    ID                shift, and go to state 63
    LITERAL_QUALQUER  shift, and go to state 11

    expressao      go to state 104
    valor          go to state 67
    var            go to state 51
    function_call  go to state 30


state 91

   70 function_call: ID PARENTESE_ESQUERDA args PARENTESE_DIREITA .
   71 procedimento_call: ID PARENTESE_ESQUERDA args PARENTESE_DIREITA .

    E_LOGICO           reduce using rule 70 (function_call)
    OU_LOGICO          reduce using rule 70 (function_call)
    ASTERISCO          reduce using rule 70 (function_call)
    MODULO             reduce using rule 70 (function_call)
    BARRA              reduce using rule 70 (function_call)
    MAIS               reduce using rule 70 (function_call)
    MENOS_UNARIO       reduce using rule 70 (function_call)
    EXPONENCIACAO      reduce using rule 70 (function_call)
    OPERADOR_TERNARIO  reduce using rule 70 (function_call)
    $default           reduce using rule 71 (procedimento_call)


state 92

   51 assign_ternaria: expressao OPERADOR_TERNARIO stmts DOIS_PONTOS . stmts

    INCREMENTO        shift, and go to state 1
    DECREMENTO        shift, and go to state 2
    FOR               shift, and go to state 3
    WHILE             shift, and go to state 4
    SWITCH            shift, and go to state 5
    IF                shift, and go to state 6
    JUMP              shift, and go to state 7
    BREAK             shift, and go to state 8
    NULL              shift, and go to state 9
    ID                shift, and go to state 10
    LITERAL_QUALQUER  shift, and go to state 11

    stmts              go to state 105
    stmt               go to state 14
    expressao          go to state 15
    operador_unario    go to state 16
    vars               go to state 17
    valor              go to state 18
    var                go to state 19
    assign             go to state 20
    assign_simples     go to state 21
    assign_unaria      go to state 22
    assign_composta    go to state 23
    assign_paralela    go to state 24
    assign_ternaria    go to state 25
    if_stmt            go to state 26
    switch_stmt        go to state 27
    while_stmt         go to state 28
    for_stmt           go to state 29
    function_call      go to state 30
    procedimento_call  go to state 31


state 93

   35 valores: valor VIRGULA . valores

    NULL  shift, and go to state 9
    ID    shift, and go to state 49

    valores  go to state 106
    valor    go to state 76
    var      go to state 51


state 94

   12 expressao: expressao .
   13          | expressao . operador expressao
   69 for_cond: PONTO_E_VIRGULA PONTO_E_VIRGULA expressao .

    E_LOGICO       shift, and go to state 39
    OU_LOGICO      shift, and go to state 40
    ASTERISCO      shift, and go to state 41
    MODULO         shift, and go to state 42
    BARRA          shift, and go to state 43
    MAIS           shift, and go to state 44
    MENOS_UNARIO   shift, and go to state 45
    EXPONENCIACAO  shift, and go to state 46

    PARENTESE_ESQUERDA  reduce using rule 12 (expressao)
    PARENTESE_ESQUERDA  [reduce using rule 69 (for_cond)]
    E_LOGICO            [reduce using rule 12 (expressao)]
    OU_LOGICO           [reduce using rule 12 (expressao)]
    ASTERISCO           [reduce using rule 12 (expressao)]
    MODULO              [reduce using rule 12 (expressao)]
    BARRA               [reduce using rule 12 (expressao)]
    MAIS                [reduce using rule 12 (expressao)]
    MENOS_UNARIO        [reduce using rule 12 (expressao)]
    EXPONENCIACAO       [reduce using rule 12 (expressao)]
    $default            reduce using rule 12 (expressao)

    operador  go to state 48


state 95

   67 for_cond: PONTO_E_VIRGULA expressao PONTO_E_VIRGULA . assign

    INCREMENTO        shift, and go to state 1
    DECREMENTO        shift, and go to state 2
    NULL              shift, and go to state 9
    ID                shift, and go to state 63
    LITERAL_QUALQUER  shift, and go to state 11

    expressao        go to state 15
    operador_unario  go to state 16
    vars             go to state 17
    valor            go to state 18
    var              go to state 19
    assign           go to state 107
    assign_simples   go to state 21
    assign_unaria    go to state 22
    assign_composta  go to state 23
    assign_paralela  go to state 24
    assign_ternaria  go to state 25
    function_call    go to state 30


state 96

   70 function_call: ID PARENTESE_ESQUERDA args . PARENTESE_DIREITA

    PARENTESE_DIREITA  shift, and go to state 108


state 97

   12 expressao: expressao .
   13          | expressao . operador expressao
   66 for_cond: assign PONTO_E_VIRGULA expressao . PONTO_E_VIRGULA assign
   68         | assign PONTO_E_VIRGULA expressao . PONTO_E_VIRGULA

    PONTO_E_VIRGULA  shift, and go to state 109
    E_LOGICO         shift, and go to state 39
    OU_LOGICO        shift, and go to state 40
    ASTERISCO        shift, and go to state 41
    MODULO           shift, and go to state 42
    BARRA            shift, and go to state 43
    MAIS             shift, and go to state 44
    MENOS_UNARIO     shift, and go to state 45
    EXPONENCIACAO    shift, and go to state 46

    PONTO_E_VIRGULA  [reduce using rule 12 (expressao)]
    E_LOGICO         [reduce using rule 12 (expressao)]
    OU_LOGICO        [reduce using rule 12 (expressao)]
    ASTERISCO        [reduce using rule 12 (expressao)]
    MODULO           [reduce using rule 12 (expressao)]
    BARRA            [reduce using rule 12 (expressao)]
    MAIS             [reduce using rule 12 (expressao)]
    MENOS_UNARIO     [reduce using rule 12 (expressao)]
    EXPONENCIACAO    [reduce using rule 12 (expressao)]

    operador  go to state 48


state 98

   65 for_stmt: FOR PARENTESE_DIREITA for_cond PARENTESE_ESQUERDA THEN . stmts END_FOR

    INCREMENTO        shift, and go to state 1
    DECREMENTO        shift, and go to state 2
    FOR               shift, and go to state 3
    WHILE             shift, and go to state 4
    SWITCH            shift, and go to state 5
    IF                shift, and go to state 6
    JUMP              shift, and go to state 7
    BREAK             shift, and go to state 8
    NULL              shift, and go to state 9
    ID                shift, and go to state 10
    LITERAL_QUALQUER  shift, and go to state 11

    stmts              go to state 110
    stmt               go to state 14
    expressao          go to state 15
    operador_unario    go to state 16
    vars               go to state 17
    valor              go to state 18
    var                go to state 19
    assign             go to state 20
    assign_simples     go to state 21
    assign_unaria      go to state 22
    assign_composta    go to state 23
    assign_paralela    go to state 24
    assign_ternaria    go to state 25
    if_stmt            go to state 26
    switch_stmt        go to state 27
    while_stmt         go to state 28
    for_stmt           go to state 29
    function_call      go to state 30
    procedimento_call  go to state 31


state 99

   64 while_stmt: WHILE PARENTESE_DIREITA expressao PARENTESE_ESQUERDA THEN . stmts END_WHILE

    INCREMENTO        shift, and go to state 1
    DECREMENTO        shift, and go to state 2
    FOR               shift, and go to state 3
    WHILE             shift, and go to state 4
    SWITCH            shift, and go to state 5
    IF                shift, and go to state 6
    JUMP              shift, and go to state 7
    BREAK             shift, and go to state 8
    NULL              shift, and go to state 9
    ID                shift, and go to state 10
    LITERAL_QUALQUER  shift, and go to state 11

    stmts              go to state 111
    stmt               go to state 14
    expressao          go to state 15
    operador_unario    go to state 16
    vars               go to state 17
    valor              go to state 18
    var                go to state 19
    assign             go to state 20
    assign_simples     go to state 21
    assign_unaria      go to state 22
    assign_composta    go to state 23
    assign_paralela    go to state 24
    assign_ternaria    go to state 25
    if_stmt            go to state 26
    switch_stmt        go to state 27
    while_stmt         go to state 28
    for_stmt           go to state 29
    function_call      go to state 30
    procedimento_call  go to state 31


state 100

   63 case: CASE . PARENTESE_DIREITA expressao_constante PARENTESE_ESQUERDA DOIS_PONTOS stmts

    PARENTESE_DIREITA  shift, and go to state 112


state 101

   58 switch_stmt: SWITCH PARENTESE_DIREITA expressao PARENTESE_ESQUERDA case_stmt . default END_SWITCH

    DEFAULT  shift, and go to state 113

    $default  reduce using rule 59 (default)

    default  go to state 114


state 102

   61 case_stmt: case .
   62          | case . case_stmt

    CASE  shift, and go to state 100

    $default  reduce using rule 61 (case_stmt)

    case_stmt  go to state 115
    case       go to state 102


state 103

   52 if_stmt: IF PARENTESE_DIREITA expressao PARENTESE_ESQUERDA THEN . stmts else_if_list else END_IF

    INCREMENTO        shift, and go to state 1
    DECREMENTO        shift, and go to state 2
    FOR               shift, and go to state 3
    WHILE             shift, and go to state 4
    SWITCH            shift, and go to state 5
    IF                shift, and go to state 6
    JUMP              shift, and go to state 7
    BREAK             shift, and go to state 8
    NULL              shift, and go to state 9
    ID                shift, and go to state 10
    LITERAL_QUALQUER  shift, and go to state 11

    stmts              go to state 116
    stmt               go to state 14
    expressao          go to state 15
    operador_unario    go to state 16
    vars               go to state 17
    valor              go to state 18
    var                go to state 19
    assign             go to state 20
    assign_simples     go to state 21
    assign_unaria      go to state 22
    assign_composta    go to state 23
    assign_paralela    go to state 24
    assign_ternaria    go to state 25
    if_stmt            go to state 26
    switch_stmt        go to state 27
    while_stmt         go to state 28
    for_stmt           go to state 29
    function_call      go to state 30
    procedimento_call  go to state 31


state 104

   12 expressao: expressao .
   13          | expressao . operador expressao
   73 args: expressao VIRGULA expressao .

    E_LOGICO       shift, and go to state 39
    OU_LOGICO      shift, and go to state 40
    ASTERISCO      shift, and go to state 41
    MODULO         shift, and go to state 42
    BARRA          shift, and go to state 43
    MAIS           shift, and go to state 44
    MENOS_UNARIO   shift, and go to state 45
    EXPONENCIACAO  shift, and go to state 46

    PARENTESE_DIREITA  reduce using rule 12 (expressao)
    PARENTESE_DIREITA  [reduce using rule 73 (args)]
    E_LOGICO           [reduce using rule 12 (expressao)]
    OU_LOGICO          [reduce using rule 12 (expressao)]
    ASTERISCO          [reduce using rule 12 (expressao)]
    MODULO             [reduce using rule 12 (expressao)]
    BARRA              [reduce using rule 12 (expressao)]
    MAIS               [reduce using rule 12 (expressao)]
    MENOS_UNARIO       [reduce using rule 12 (expressao)]
    EXPONENCIACAO      [reduce using rule 12 (expressao)]
    $default           reduce using rule 12 (expressao)

    operador  go to state 48


state 105

   51 assign_ternaria: expressao OPERADOR_TERNARIO stmts DOIS_PONTOS stmts .

    $default  reduce using rule 51 (assign_ternaria)


state 106

   35 valores: valor VIRGULA valores .

    $default  reduce using rule 35 (valores)


state 107

   67 for_cond: PONTO_E_VIRGULA expressao PONTO_E_VIRGULA assign .

    $default  reduce using rule 67 (for_cond)


state 108

   70 function_call: ID PARENTESE_ESQUERDA args PARENTESE_DIREITA .

    $default  reduce using rule 70 (function_call)


state 109

   66 for_cond: assign PONTO_E_VIRGULA expressao PONTO_E_VIRGULA . assign
   68         | assign PONTO_E_VIRGULA expressao PONTO_E_VIRGULA .

    INCREMENTO        shift, and go to state 1
    DECREMENTO        shift, and go to state 2
    NULL              shift, and go to state 9
    ID                shift, and go to state 63
    LITERAL_QUALQUER  shift, and go to state 11

    $default  reduce using rule 68 (for_cond)

    expressao        go to state 15
    operador_unario  go to state 16
    vars             go to state 17
    valor            go to state 18
    var              go to state 19
    assign           go to state 117
    assign_simples   go to state 21
    assign_unaria    go to state 22
    assign_composta  go to state 23
    assign_paralela  go to state 24
    assign_ternaria  go to state 25
    function_call    go to state 30


state 110

   65 for_stmt: FOR PARENTESE_DIREITA for_cond PARENTESE_ESQUERDA THEN stmts . END_FOR

    END_FOR  shift, and go to state 118


state 111

   64 while_stmt: WHILE PARENTESE_DIREITA expressao PARENTESE_ESQUERDA THEN stmts . END_WHILE

    END_WHILE  shift, and go to state 119


state 112

   63 case: CASE PARENTESE_DIREITA . expressao_constante PARENTESE_ESQUERDA DOIS_PONTOS stmts

    ID  shift, and go to state 78

    expressao_constante  go to state 120
    var                  go to state 121


state 113

   60 default: DEFAULT . stmts

    INCREMENTO        shift, and go to state 1
    DECREMENTO        shift, and go to state 2
    FOR               shift, and go to state 3
    WHILE             shift, and go to state 4
    SWITCH            shift, and go to state 5
    IF                shift, and go to state 6
    JUMP              shift, and go to state 7
    BREAK             shift, and go to state 8
    NULL              shift, and go to state 9
    ID                shift, and go to state 10
    LITERAL_QUALQUER  shift, and go to state 11

    stmts              go to state 122
    stmt               go to state 14
    expressao          go to state 15
    operador_unario    go to state 16
    vars               go to state 17
    valor              go to state 18
    var                go to state 19
    assign             go to state 20
    assign_simples     go to state 21
    assign_unaria      go to state 22
    assign_composta    go to state 23
    assign_paralela    go to state 24
    assign_ternaria    go to state 25
    if_stmt            go to state 26
    switch_stmt        go to state 27
    while_stmt         go to state 28
    for_stmt           go to state 29
    function_call      go to state 30
    procedimento_call  go to state 31


state 114

   58 switch_stmt: SWITCH PARENTESE_DIREITA expressao PARENTESE_ESQUERDA case_stmt default . END_SWITCH

    END_SWITCH  shift, and go to state 123


state 115

   62 case_stmt: case case_stmt .

    $default  reduce using rule 62 (case_stmt)


state 116

   52 if_stmt: IF PARENTESE_DIREITA expressao PARENTESE_ESQUERDA THEN stmts . else_if_list else END_IF

    ELSEIF  shift, and go to state 124

    else_if_list  go to state 125
    else_if       go to state 126


state 117

   66 for_cond: assign PONTO_E_VIRGULA expressao PONTO_E_VIRGULA assign .

    $default  reduce using rule 66 (for_cond)


state 118

   65 for_stmt: FOR PARENTESE_DIREITA for_cond PARENTESE_ESQUERDA THEN stmts END_FOR .

    $default  reduce using rule 65 (for_stmt)


state 119

   64 while_stmt: WHILE PARENTESE_DIREITA expressao PARENTESE_ESQUERDA THEN stmts END_WHILE .

    $default  reduce using rule 64 (while_stmt)


state 120

   63 case: CASE PARENTESE_DIREITA expressao_constante . PARENTESE_ESQUERDA DOIS_PONTOS stmts

    PARENTESE_ESQUERDA  shift, and go to state 127


state 121

   39 expressao_constante: var .

    $default  reduce using rule 39 (expressao_constante)


state 122

   60 default: DEFAULT stmts .

    $default  reduce using rule 60 (default)


state 123

   58 switch_stmt: SWITCH PARENTESE_DIREITA expressao PARENTESE_ESQUERDA case_stmt default END_SWITCH .

    $default  reduce using rule 58 (switch_stmt)


state 124

   55 else_if: ELSEIF . PARENTESE_DIREITA expressao PARENTESE_ESQUERDA THEN stmts

    PARENTESE_DIREITA  shift, and go to state 128


state 125

   52 if_stmt: IF PARENTESE_DIREITA expressao PARENTESE_ESQUERDA THEN stmts else_if_list . else END_IF

    ELSE  shift, and go to state 129

    $default  reduce using rule 56 (else)

    else  go to state 130


state 126

   53 else_if_list: else_if .
   54             | else_if . else_if_list

    ELSEIF  shift, and go to state 124

    $default  reduce using rule 53 (else_if_list)

    else_if_list  go to state 131
    else_if       go to state 126


state 127

   63 case: CASE PARENTESE_DIREITA expressao_constante PARENTESE_ESQUERDA . DOIS_PONTOS stmts

    DOIS_PONTOS  shift, and go to state 132


state 128

   55 else_if: ELSEIF PARENTESE_DIREITA . expressao PARENTESE_ESQUERDA THEN stmts

    NULL              shift, and go to state 9
    ID                shift, and go to state 63
    LITERAL_QUALQUER  shift, and go to state 11

    expressao      go to state 133
    valor          go to state 67
    var            go to state 51
    function_call  go to state 30


state 129

   57 else: ELSE . stmts

    INCREMENTO        shift, and go to state 1
    DECREMENTO        shift, and go to state 2
    FOR               shift, and go to state 3
    WHILE             shift, and go to state 4
    SWITCH            shift, and go to state 5
    IF                shift, and go to state 6
    JUMP              shift, and go to state 7
    BREAK             shift, and go to state 8
    NULL              shift, and go to state 9
    ID                shift, and go to state 10
    LITERAL_QUALQUER  shift, and go to state 11

    stmts              go to state 134
    stmt               go to state 14
    expressao          go to state 15
    operador_unario    go to state 16
    vars               go to state 17
    valor              go to state 18
    var                go to state 19
    assign             go to state 20
    assign_simples     go to state 21
    assign_unaria      go to state 22
    assign_composta    go to state 23
    assign_paralela    go to state 24
    assign_ternaria    go to state 25
    if_stmt            go to state 26
    switch_stmt        go to state 27
    while_stmt         go to state 28
    for_stmt           go to state 29
    function_call      go to state 30
    procedimento_call  go to state 31


state 130

   52 if_stmt: IF PARENTESE_DIREITA expressao PARENTESE_ESQUERDA THEN stmts else_if_list else . END_IF

    END_IF  shift, and go to state 135


state 131

   54 else_if_list: else_if else_if_list .

    $default  reduce using rule 54 (else_if_list)


state 132

   63 case: CASE PARENTESE_DIREITA expressao_constante PARENTESE_ESQUERDA DOIS_PONTOS . stmts

    INCREMENTO        shift, and go to state 1
    DECREMENTO        shift, and go to state 2
    FOR               shift, and go to state 3
    WHILE             shift, and go to state 4
    SWITCH            shift, and go to state 5
    IF                shift, and go to state 6
    JUMP              shift, and go to state 7
    BREAK             shift, and go to state 8
    NULL              shift, and go to state 9
    ID                shift, and go to state 10
    LITERAL_QUALQUER  shift, and go to state 11

    stmts              go to state 136
    stmt               go to state 14
    expressao          go to state 15
    operador_unario    go to state 16
    vars               go to state 17
    valor              go to state 18
    var                go to state 19
    assign             go to state 20
    assign_simples     go to state 21
    assign_unaria      go to state 22
    assign_composta    go to state 23
    assign_paralela    go to state 24
    assign_ternaria    go to state 25
    if_stmt            go to state 26
    switch_stmt        go to state 27
    while_stmt         go to state 28
    for_stmt           go to state 29
    function_call      go to state 30
    procedimento_call  go to state 31


state 133

   12 expressao: expressao .
   13          | expressao . operador expressao
   55 else_if: ELSEIF PARENTESE_DIREITA expressao . PARENTESE_ESQUERDA THEN stmts

    PARENTESE_ESQUERDA  shift, and go to state 137
    E_LOGICO            shift, and go to state 39
    OU_LOGICO           shift, and go to state 40
    ASTERISCO           shift, and go to state 41
    MODULO              shift, and go to state 42
    BARRA               shift, and go to state 43
    MAIS                shift, and go to state 44
    MENOS_UNARIO        shift, and go to state 45
    EXPONENCIACAO       shift, and go to state 46

    PARENTESE_ESQUERDA  [reduce using rule 12 (expressao)]
    E_LOGICO            [reduce using rule 12 (expressao)]
    OU_LOGICO           [reduce using rule 12 (expressao)]
    ASTERISCO           [reduce using rule 12 (expressao)]
    MODULO              [reduce using rule 12 (expressao)]
    BARRA               [reduce using rule 12 (expressao)]
    MAIS                [reduce using rule 12 (expressao)]
    MENOS_UNARIO        [reduce using rule 12 (expressao)]
    EXPONENCIACAO       [reduce using rule 12 (expressao)]

    operador  go to state 48


state 134

   57 else: ELSE stmts .

    $default  reduce using rule 57 (else)


state 135

   52 if_stmt: IF PARENTESE_DIREITA expressao PARENTESE_ESQUERDA THEN stmts else_if_list else END_IF .

    $default  reduce using rule 52 (if_stmt)


state 136

   63 case: CASE PARENTESE_DIREITA expressao_constante PARENTESE_ESQUERDA DOIS_PONTOS stmts .

    $default  reduce using rule 63 (case)


state 137

   55 else_if: ELSEIF PARENTESE_DIREITA expressao PARENTESE_ESQUERDA . THEN stmts

    THEN  shift, and go to state 138


state 138

   55 else_if: ELSEIF PARENTESE_DIREITA expressao PARENTESE_ESQUERDA THEN . stmts

    INCREMENTO        shift, and go to state 1
    DECREMENTO        shift, and go to state 2
    FOR               shift, and go to state 3
    WHILE             shift, and go to state 4
    SWITCH            shift, and go to state 5
    IF                shift, and go to state 6
    JUMP              shift, and go to state 7
    BREAK             shift, and go to state 8
    NULL              shift, and go to state 9
    ID                shift, and go to state 10
    LITERAL_QUALQUER  shift, and go to state 11

    stmts              go to state 139
    stmt               go to state 14
    expressao          go to state 15
    operador_unario    go to state 16
    vars               go to state 17
    valor              go to state 18
    var                go to state 19
    assign             go to state 20
    assign_simples     go to state 21
    assign_unaria      go to state 22
    assign_composta    go to state 23
    assign_paralela    go to state 24
    assign_ternaria    go to state 25
    if_stmt            go to state 26
    switch_stmt        go to state 27
    while_stmt         go to state 28
    for_stmt           go to state 29
    function_call      go to state 30
    procedimento_call  go to state 31


state 139

   55 else_if: ELSEIF PARENTESE_DIREITA expressao PARENTESE_ESQUERDA THEN stmts .

    $default  reduce using rule 55 (else_if)
